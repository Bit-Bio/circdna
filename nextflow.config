/*
========================================================================================
    nf-core/circdna Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input                       = null
    input_format                = "FASTQ"
    bam_sorted                  = false
    bwa_index                   = null

    // concatenate fastq options
    save_merged_fastq           = false

    // References
    genome                      = null
    igenomes_base               = 's3://ngi-igenomes/igenomes'
    igenomes_ignore             = false

    // BWA Reference
    save_reference              = false

    // Circular DNA identificat ion options
    circle_identifier           = "circle_map_realign"
    coverage_bases              = 200
    coverage_mapq               = 0
    coverage_extension          = 100
    circdna_filter_mapq         = 20
    circdna_filter_nSplit       = 2

    // FASTQC options
    skip_qc                     = false

    // Trimming options
    clip_r1                     = null
    clip_r2                     = null
    three_prime_clip_r1         = null
    three_prime_clip_r2         = null
    trim_nextseq                = null
    save_trimmed                = false
    skip_trimming               = false

    // Picard markduplicates
    skip_markduplicates         = false
    keep_duplicates             = false

    // AmpliconArchitect
    aa_data_repo                = null
    mosek_license_dir           = null
    reference_build             = null
    aa_cn_gain_threshold        = null
    aa_no_filter                = null

    // CNVKIT
    cnvkit_targets              = null
    cnvkit_reference            = null


    // MultiQC options
    skip_multiqc                = false
    multiqc_config              = null
    multiqc_title               = null
    max_multiqc_email_size      = '25.MB'

    // Boilerplate options
    outdir                      = './results'
    tracedir                    = "${params.outdir}/pipeline_info"
    publish_dir_mode            = 'copy'
    email                       = null
    email_on_fail               = null
    plaintext_email             = false
    monochrome_logs             = false
    help                        = false
    validate_params             = true
    show_hidden_params          = false
    schema_ignore_params        = 'genomes,modules'
    enable_conda                = false
    singularity_pull_docker_container = false

    // Config options
    custom_config_version       = 'master'
    custom_config_base          = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    hostnames                   = [:]
    config_profile_description  = null
    config_profile_contact      = null
    config_profile_url          = null
    config_profile_name         = null

    // Max resource options
    // Defaults only, expecting  to be overwritten
    max_memory                  = '128.GB'
    max_cpus                    = 16
    max_time                    = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    serverR01 {
        params.aa_data_repo           = '/home/local/BICR/dschreye/src/AmpliconArchitect/data_repo'
        params.mosek_license_dir      = '/home/local/BICR/dschreye/Documents/mosek/'
        params.reference_build        = 'GRCh38'
        params.max_memory                 = '120.GB'
        params.max_cpus                   = 28
        params.max_time                   = '240.h'
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }

    test_AA {
        params {
            params.enable_conda     = true
            circle_identifier       = "ampliconarchitect"
            bam_sorted              = false
            input                   = "test-data/samplesheet_bam_AA.csv"
            bwa_index               = "/mnt/data_disk/R01/dschreye/iGenomes/Homo_sapiens/NCBI/build37.2/Sequence/BWAIndex/genome.fa.{alt,amb,ann,bwt,pac,sa}"
            aa_data_repo            = '/home/local/BICR/dschreye/src/AmpliconArchitect/data_repo'
            mosek_license_dir       = '/home/local/BICR/dschreye/Documents/mosek/'
            reference_build         = 'GRCh37'
            fasta                   = "/mnt/data_disk/R01/dschreye/iGenomes/Homo_sapiens/NCBI/build37.2/Sequence/WholeGenomeFasta/genome.fa"
            input_format            = "BAM"
            skip_markduplicates     = true
            skip_trimming           = true
            max_memory              = '100.GB'
            max_cpus                = 15
        }
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'nf-core/circdna'
    author          = 'Daniel Schreyer'
    homePage        = 'https://github.com/nf-core/circdna'
    description     = 'Pipeline for the identification of circular DNAs'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0dev'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
