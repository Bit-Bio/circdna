/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        args            = Additional arguments appended to command in module.
        args2           = Second set of arguments appended to command in module (multi-tool modules).
        args3           = Third set of arguments appended to command in module (multi-tool modules).
        publish_dir     = Directory to publish results.
        publish_by_meta = Groovy list of keys available in meta map to append as directories to "publish_dir" path
                            If publish_by_meta = true                 - Value of ${meta['id']} is appended as a directory to "publish_dir" path
                            If publish_by_meta = ['id', 'custompath'] - If "id" is in meta map and "custompath" isn't then "${meta['id']}/custompath/"
                                                                        is appended as a directory to "publish_dir" path
                            If publish_by_meta = false / null         - No directories are appended to "publish_dir" path
        publish_files   = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
                            The value of "directory" is appended to the standard "publish_dir" path as defined above.
                            If publish_files = null (unspecified)     - All files are published.
                            If publish_files = false                  - No files are published.
        suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
}

//
// Input Preparation options
//

process {
    withName: UNICYCLER {
        ext.args = "--no_rotate"
    }
    withName: CAT_FASTQ {
        ext.args = ""
        publish_dir = 'fastq'
    }
    withName: FASTQC {
        ext.args = ""
        publish_dir = 'fastqc'
    }
}

if (!params.skip_trimming) {
    process {
        withName: TRIMGALORE {
            ext.args   = [
                '--fastqc',
                params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/trimgalore/fastqc" },
                    mode: 'copy',
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: 'copy',
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: 'copy',
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

if ("circle_finder" in params.circle_identifier.split(",")) {
    process {
        withName: SAMTOOLS_SORT_QNAME_CF {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/circlefinder/samtools" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
        withName: CIRCLEFINDER {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/circlefinder" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
        withName: SAMBLASTER {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/circlefinder/samblaster" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
    }
}

if ("circexplorer2" in params.circle_identifier.split(",")) {
    process {
        withName: CIRCEXPLORER2_PARSE {
            ext.args = "-t BWA"
            publishDir = [
                path: { "${params.outdir}/circexplorer2" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
        withName: '.*:SAMTOOLS_SORT_QNAME_CF' {
            ext.prefix = { "${meta.id}.qname.sorted" }
            ext.args = "-n"
            publishDir = [
                path: { "${params.outdir}/circexplorer2" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
    }
}

if ("ampliconarchitect" in params.circle_identifier.split(",")) {
    process {
        withName: CNVKIT_BATCH {
            ext.args = ["--method wgs"]
            publishDir = [
                path: { "${params.outdir}/ampliconarchitect/cnvkit" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
        withName: CNVKIT_BATCH {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/ampliconarchitect/cnvkit" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        withName: AMPLICONARCHITECT_PREPAREAA {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/ampliconarchitect/prepareaa" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        withName: AMPLICONARCHITECT_AMPLICONARCHITECT {
            ext.args = ""
            publishDir = [
                [
                    path: { "${params.outdir}/ampliconarchitect/ampliconarchitect/sv_view" },
                    mode: 'copy',
                    pattern: '*.{png,pdf}'
                ],
                [
                    path: { "${params.outdir}/ampliconarchitect/ampliconarchitect/amplicons" },
                    mode: 'copy',
                    pattern: '*{graph.txt,cycles.txt}'
                ],
                [
                    path: { "${params.outdir}/ampliconarchitect/ampliconarchitect/logs" },
                    mode: 'copy',
                    pattern: '*logs.txt'
                ],
                [
                    path: { "${params.outdir}/ampliconarchitect/ampliconarchitect/cnseg" },
                    mode: 'copy',
                    pattern: '*cnseg.txt'
                ]
            ]
        }
            publish_files   = ['pdf':'sv_view', 'png':'sv_view', 'summary.txt':'', 'logs.txt':'logs', 'out':'out',
                            'graph.txt':'amplicons', 'cycles.txt':'amplicons', 'cnseg.txt':'cnseg', ]

        withName: AMPLICONARCHITECT_AMPLICONCLASSIFIER {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
    }
}

if ("unicycler" in params.circle_identifier.split(",")) {
    process {
        withName: UNICYCLER {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/unicycler" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
        withName: SEQTK_SEQ {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/unicycler" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
        withName: MINIMAP2_ALIGN {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/unicycler/minimap2" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
    }
}

if ("circle_map_realign" in params.circle_identifier.split(",") |
"circle_map_repeats" in params.circle_identifier.split(",") )  {
    process {
        withName: '.*:SAMTOOLS_SORT_QNAME_CM' {
            ext.prefix = { "${meta.id}.qname.sorted" }
            ext.args = "-n"
            publishDir = [
                path: { "${params.outdir}/circlemap/samtools" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
        withName: CIRCLEMAP_READEXTRACTOR {
            ext.prefix = { "${meta.id}.qname.sorted" }
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/circlemap/readextractor" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
        withName: SAMTOOLS_SORT_RE {
            ext.prefix = { "${meta.id}.circular_read_candidates_sorted" }
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/circlemap/readextractor" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
        withName: CIRCLEMAP_REALIGN {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/circlemap/realign" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
        withName: CIRCLEMAP_REPEATS {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/circlemap/repeats" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
    }
}

params {
    modules {
        'cat_fastq' {
            args            = ""
            publish_dir     = 'fastq'
        }
        'fastqc' {
            args = "--quiet"
        }
        'multiqc' {
            args = ""
        }
        'trimgalore' {
            args = "--fastqc"
            publish_files   = ['txt':'', 'html':'fastqc', 'zip':'fastqc']
        }
        'bwa_mem' {
            // default bwa mem with additional input
            // -q -> don't modifiy mapQ of supplementary alignments
            args = "-q"
        }
        'bwa_index' {
            args = ""
        }
        samblaster {
            args = "-e --minNonOverlap 10"
        }

        'samtools_faidx' {
            args = ""
        }
        'samtools_index_bwa' {
            args = ""
            publish_dir = 'bwa'
        }
        'samtools_index_re' {
            args = ""
            publish_dir = 'circlemap/readextractor'
        }
        'samtools_index_filtered' {
            args = ""
            publish_dir = 'bwa/filtered'
            publish_files = true
        }

        'samtools_sort' {
            args = ""
            suffix = ".sorted"
            publish_files = false
        }
        'samtools_sort_filtered' {
            args = ""
            publish_dir = "bwa/filtered"
            suffix = ".duplicates.removed.sorted"
        }
        'samtools_view' {
            args = "-hf 0x2"
            publish_dir = 'samtools/concordant'
        }

        'samtools_view_filter' {
            args = '-F 0x0400'
            suffix = ".duplicates.removed"
            publish_files = false
        }

        'picard_markduplicates' {
            args            = '--ASSUME_SORTED true --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
            suffix          = '.markdup.sorted'
            publish_files   = ['bam': '', 'metrics.txt':'picard_metrics']
            publish_dir     = "bwa"
        }
        'picard_markduplicates_samtools' {
            args            = ''
            suffix          = '.markdup.sorted'
            publish_files   = ['bai':'', 'csi':'', 'stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir     = "bwa"
        }


        'bedtools_sortedbam2bed' {
            args            = "-cigar"
        }
        'bedtools_splitbam2bed' {
            args            = "-cigar"
        }
        'samtools_stats_options' {
            args            = ""
            publish_files   = ['stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
        }
        'samtools_stats' {
            args            = ""
            publish_files   = "samtools/stats"
        }
        'ampliconarchitect_ampliconarchitect' {
            args            = ""
            publish_dir   = "ampliconarchitect/AA"
            publish_by_meta = true
            publish_files   = ['pdf':'sv_view', 'png':'sv_view', 'summary.txt':'', 'logs.txt':'logs', 'out':'out',
                            'graph.txt':'amplicons', 'cycles.txt':'amplicons', 'cnseg.txt':'cnseg', ]
        }
        'unicycler' {
            args            = "--no_rotate"
            publish_dir   = "unicycler"
        }
        'seqtk_seq' {
            args            = ""
            publish_dir   = "unicycler"
        }
        'minimap2_align' {
            args            = ""
            publish_dir   = "minimap2/align"
        }

    }
}
